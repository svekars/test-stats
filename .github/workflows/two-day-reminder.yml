name: Reminder to submit PR

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *"

jobs:
  check-comments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install @actions/core octokit/request@5

      - name: Comment Checker
        run: |
          const core = require('@actions/core');
          const { request } = require('@octokit/request');

          const twoDaysAgo = new Date();
          twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

          async function getComments(owner, repo, issueNumber) {
            const response = await request('GET /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              owner: owner,
              repo: repo,
              issue_number: issueNumber
            });
            return response.data;
          }

          async function postComment(owner, repo, issueNumber, body) {
            await request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              owner: owner,
              repo: repo,
              issue_number: issueNumber,
              body: body
            });
          }

          async function checkIssueComments() {
            const owner = process.env.GITHUB_REPOSITORY_OWNER;
            const repo = process.env.GITHUB_REPOSITORY;

            const response = await request('GET /repos/{owner}/{repo}/issues', {
              owner: owner,
              repo: repo,
              state: 'open'
            });

            const issues = response.data;
            for (const issue of issues) {
              const comments = await getComments(owner, repo, issue.number);
              const hasAssignMeComment = comments.some(comment => comment.body.includes("/assigntome"));
              const assignMeCommentDate = comments.find(comment => comment.body.includes("/assigntome"))?.created_at;

              if (hasAssignMeComment) {
                const hasSubmitPRComment = comments.some(comment => comment.body.includes("Submit a PR"));

                if (!hasSubmitPRComment) {
                  const commentDate = new Date(assignMeCommentDate);
                  if (commentDate < twoDaysAgo) {
                    const message = `@${issue.user.login} It's been more than 2 days since this issue was assigned. Please submit a PR ASAP.`;
                    await postComment(owner, repo, issue.number, message);
                  }
                }
              }
            }
          }

          checkIssueComments()
            .then(() => {
              console.log('Comment check completed.');
            })
            .catch((error) => {
              core.setFailed(`Comment check failed: ${error}`);
            });
